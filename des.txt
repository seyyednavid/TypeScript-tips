// convert typescript to js => es5
tsc index.ts 


// creating tsconfig.json -- turn ES5(var) to Es6(let, const)
tsc --init


// let sales = 123_456_789 annotate
let sales: number = 123_456_789


// type any 
let level;


function render(document: any) {
  console.log(document);
}


//Array of numbers
let numbers: number[] = [1, 2, 3]


//Array of any => like javascript
let numbers = []


//topple
let user: [number, string] = [1, "Navid"]


//Enum
// const small = 's';
// const medium = 'm';
// const large = 'l';
(const) enum Size {Small = 's', Medium = 'm', Large= 'l'};
let mySize: Size = Size.Medium
console.log(mySize);


//function
function calculateTax(income: number , taxYear: number) : number {
  if (taxYear < 50_000) {
    return income * 1.2;
  } 
  return income * 1.3
}
function calculateTax(income: number , taxYear = 2022) : number {
  if (taxYear < 50_000) {
    return income * 1.2;
  } 
  return income * 1.3
}
calculateTax(10000, 100);
calculateTax(10000);



//Object
let employee: {
  id: number,
  name: string,
  retire: (date : Date) => void
} = {
  id: 1,
  name: 'Ali',
  retire: (date: Date) => {
    console.log(date);
  }
}
employee.name = "David"

// read only property
let employee1: {
  readonly id: number;
  name: string;
} = {
  id: 1,
  name: "Ali",
};
employee1.id = 2; //XXXX

// Define type employee
type Employee = {
  readonly id: number;
  name: string;
  retire: (date: Date) => void;
};


let employee: Employee = {
  id: 1,
  name: '',
  retire: (date: Date) => {
    console.log(date);
  }
}



// Union types
function kgToLbs(weight: number | string): number {
  if (typeof weight === "number") 
   return weight * 2.2;
  else
   return parseInt(weight) * 2.2;
}


// Intersection types
let weight: number & string;

type Dragable = {
  drag: () => void
}

type resizeable = {
  resize: () => void;
}

type UIWidget = Dragable & resizeable;

let textBox: UIWidget = {
  drag: () => {},
  resize: () => {}
}


// Literal types
type Quantity = 50 | 100;
let quantity: Quantity = 50;

type Metric = 'cm'|'inch';
let metric: Metric = 'cm'


// Nullable types
function greet(name: string | null | undefined) {
  if(name)
    console.log(name)
  else 
    console.log('invalid argument')
}
greet(undefined)


// Optional chain
// Optional chain
type Customer = {
  birthDate?: Date; // optional property
};
function getCustomer(id: number): Customer | null | undefined {
  return id === 0 ? null : { birthDate: new Date() };
}
// let customerOne = getCustomer(0);
// if (customerOne !== null && customerOne !== undefined)
//   console.log(customerOne.birthDate);

// Easy solution - chaining operator
let customerOne = getCustomer(0);
console.log(customerOne?.birthDate?.getFullYear);
//example ==> customer?.[0]


// Example
// let log: any = (message: string) => console.log(message);
let log: any = null
log?.('a'); //when will be executed that log is a function


// nullish operator
let speed: number | null = 0
// let ride = {
//   speed: speed !== null ? speed : 30
// }
//means if the value is null and undefined equal 30
let ride = {
  speed: speed ?? 30
}
console.log(ride.speed);

// type assertion
// let phone = document.getElementById("phone") as HTMLInputElement;
let phone = <HTMLInputElement> document.getElementById("phone");
phone.value 


// unknown
function render (document : unknown) {
  // typeof for primitive
  if (typeof document === "string") {
  } // instanceof for reference
  else if (document instanceof Object) {
  }
  
}


// never 
function processEvent(): never{
  while(true){
    console.log("hi");
  }
}
processEvent();
// below cod won't be executed because all the time are working
console.log("hey");